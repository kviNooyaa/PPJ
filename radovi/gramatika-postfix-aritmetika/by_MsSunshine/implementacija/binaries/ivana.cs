// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2008
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.5.190
// Machine:  ODIN
// DateTime: 1/10/2010 9:56:38 PM
// UserName: deltaean
// Input file <ivana.y>

// options: no-lines

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;

public enum Tokens {error=48,
    EOF=49,DIGIT=50,UMINUS=51};

public class Parser: ShiftReduceParser<int, LexLocation>
{
    int[] regs = new int[26];
    int _base=10;
#pragma warning disable 649
    private Dictionary<int, string> aliasses;
#pragma warning restore 649

  protected override void Initialize()
  {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);

    this.InitStateTable(15);
    AddState(0,new State(-2,new int[]{-1,1}));
    AddState(1,new State(new int[]{49,2,48,5,50,14},new int[]{-3,3,-4,7,-5,13}));
    AddState(2,new State(-1));
    AddState(3,new State(new int[]{10,4}));
    AddState(4,new State(-3));
    AddState(5,new State(new int[]{10,6}));
    AddState(6,new State(-4));
    AddState(7,new State(new int[]{45,12,50,14,10,-5},new int[]{-4,8,-5,13}));
    AddState(8,new State(new int[]{42,9,47,10,43,11,45,12,50,14},new int[]{-4,8,-5,13}));
    AddState(9,new State(-6));
    AddState(10,new State(-7));
    AddState(11,new State(-8));
    AddState(12,new State(-9));
    AddState(13,new State(-10));
    AddState(14,new State(-11));

    Rule[] rules=new Rule[12];
    rules[1]=new Rule(-2, new int[]{-1,49});
    rules[2]=new Rule(-1, new int[]{});
    rules[3]=new Rule(-1, new int[]{-1,-3,10});
    rules[4]=new Rule(-1, new int[]{-1,48,10});
    rules[5]=new Rule(-3, new int[]{-4});
    rules[6]=new Rule(-4, new int[]{-4,-4,42});
    rules[7]=new Rule(-4, new int[]{-4,-4,47});
    rules[8]=new Rule(-4, new int[]{-4,-4,43});
    rules[9]=new Rule(-4, new int[]{-4,45});
    rules[10]=new Rule(-4, new int[]{-5});
    rules[11]=new Rule(-5, new int[]{50});
    this.InitRules(rules);

    this.InitNonTerminals(new string[] {"", "list", "$accept", "stat", "expr", 
      "number", });
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 4: // list -> list, error, '\n'
{
                    yyerrok();
                }
        break;
      case 5: // stat -> expr
{
                    
                }
        break;
      case 6: // expr -> expr, expr, '*'
{
			
			System.Console.WriteLine("MUL R"+(ValueStack[ValueStack.Depth-3]-10)+" , R"+(ValueStack[ValueStack.Depth-2]-10)+" , R"+(_base-10));
			
                    CurrentSemanticValue = _base++;
                }
        break;
      case 7: // expr -> expr, expr, '/'
{
			
			System.Console.WriteLine("DIV R"+(ValueStack[ValueStack.Depth-3]-10)+" , R"+(ValueStack[ValueStack.Depth-2]-10)+" , R"+(_base-10));
			
                    CurrentSemanticValue = _base++;
                }
        break;
      case 8: // expr -> expr, expr, '+'
{
			
		System.Console.WriteLine("ADD R"+(ValueStack[ValueStack.Depth-3]-10)+" , R"+(ValueStack[ValueStack.Depth-2]-10)+" , R"+(_base-10));
			
                    CurrentSemanticValue = _base++;
                }
        break;
      case 9: // expr -> expr, '-'
{
			
			System.Console.WriteLine("SUB "+ 0 +" , R"+(ValueStack[ValueStack.Depth-2]-10)+" , R"+(_base-10));
			
                    CurrentSemanticValue = _base++;
                }
        break;
      case 11: // number -> DIGIT
{
			System.Console.WriteLine("MOVE "+ValueStack[ValueStack.Depth-1]+" R"+(_base-10));
			
                    CurrentSemanticValue = _base++;
                   
                }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


    Parser() : base(null) { }

    static void Main(string[] args)
    {
        Parser parser = new Parser();
        
        System.IO.TextReader reader;
        if (args.Length > 0)
            reader = new System.IO.StreamReader(args[0]);
        else
            reader = System.Console.In;
            
        parser.Scanner = new Lexer(reader);
        //parser.Trace = true;
        
        parser.Parse();
    }


    /*
     * Copied from GPPG documentation.
     */
    class Lexer: QUT.Gppg.AbstractScanner<int,LexLocation>
    {
         private System.IO.TextReader reader;
    
         //
         // Version 1.2.0 needed the following code.
         // In V1.2.1 the base class provides this empty default.
         //
         // public override LexLocation yylloc { 
         //     get { return null; } 
         //     set { /* skip */; }
         // }
         //
    
         public Lexer(System.IO.TextReader reader)
         {
             this.reader = reader;
         }
    
         public override int yylex()
         {
             char a;
             int ord = reader.Read();
             //
             // Must check for EOF
             //
             if (ord == -1)
                 return (int)Tokens.EOF;
             else
                 a = (char)ord;
    
             if (a == '\n')
                return a;
             else if (char.IsWhiteSpace(a))
                 return yylex();
             else if (char.IsDigit(a))
             {
                 yylval = a - '0';
                 return (int)Tokens.DIGIT;
             }
             
             else
                 switch (a)
                 {
                     case '+':
                     case '-':
                     case '*':
                     case '/':
		     
                    
                         return a;
                     default:
                         Console.Error.WriteLine("neispravan unos za: '{0}'", a);
                         return yylex();
                 }
         }
    
         public override void yyerror(string format, params object[] args)
         {
             Console.Error.WriteLine(format, args);
         }
    }
}
